import * as Three from "three";
import { loadGltfWithTextures } from "../../utils/load-gltf";

import React from "react";
import convert from "convert-units";

let cached3DTest = null;

export default {
  name: "test",
  prototype: "items",

  info: {
    title: "test",
    tag: ["furnishing", "electronics"],
    description: "测试3D模型",
    image: require("./test.png"),
  },

  properties: {
    altitude: {
      label: "Altitude",
      type: "length-measure",
      defaultValue: {
        length: 0,
      },
    },
  },

  render2D: function (element, layer, scene) {
    let width = { length: 1.6, unit: "ft" };
    let depth = { length: 0.59, unit: "ft" };

    let newWidth = convert(width.length).from(width.unit).to(scene.unit);
    let newDepth = convert(depth.length).from(depth.unit).to(scene.unit);

    let angle = element.rotation + 90;

    let textRotation = 0;
    if (Math.sin((angle * Math.PI) / 180) < 0) {
      textRotation = 180;
    }

    return (
      // <g transform={`translate(${-newWidth / 2},${-newDepth / 2})`}>
      //   <rect
      //     key="1"
      //     x="0"
      //     y="0"
      // width={newWidth}
      // height={newDepth}
      //     style={style}
      //   />
      //   <line
      //     key="2"
      //     x1={newWidth / 2}
      //     x2={newWidth / 2}
      //     y1={newDepth}
      //     y2={1.5 * newDepth}
      //     style={arrow_style}
      //   />
      //   <line
      //     key="3"
      //     x1={0.35 * newWidth}
      //     x2={newWidth / 2}
      //     y1={1.2 * newDepth}
      //     y2={1.5 * newDepth}
      //     style={arrow_style}
      //   />
      //   <line
      //     key="4"
      //     x1={newWidth / 2}
      //     x2={0.65 * newWidth}
      //     y1={1.5 * newDepth}
      //     y2={1.2 * newDepth}
      //     style={arrow_style}
      //   />
      //   <text
      //     key="5"
      //     x="0"
      //     y="0"
      //     transform={`translate(${newWidth / 2}, ${
      //       newDepth / 2
      //     }) scale(1,-1) rotate(${textRotation})`}
      //     style={{ textAnchor: "middle", fontSize: "11px" }}
      //   >
      //     {element.type}
      //   </text>
      // </g>

      <g transform={`translate(${-newWidth / 2},${-newDepth / 2}) scale(0.05)`}>
        <path
          d="M1655.461896 5.269882c-11.908929 32.369097-15.532335 68.530692-10.870219 108.46063a22.803304 22.803304 0 0 1-5.507578 17.94794 23.334737 23.334737 0 0 1-17.199102 7.899026c-154.598671 1.449363-310.574237 1.304426-467.902541-0.483121-364.273119-4.589648-762.364697 13.285823-1146.445771-11.11178-13.527384-103.629422 50.969249-126.577662 141.312848-127.060782 502.131653-2.07742 1004.335774-0.628057 1506.612363 4.348087z"
          fill="#C8D9E5"
          p-id="4525"
        ></path>
        <path
          d="M1655.461896 5.269882c451.476432-48.795206 730.961842 279.24385 899.571018 647.140375-150.009023-17.392351-323.449407 0.483121-449.785509-28.262569-222.549618-51.041718-376.278672-189.21428-461.138849-414.517687a18.600153 18.600153 0 0 0-16.184548-12.319582c-167.884494-12.078021-286.490663 5.314329-429.494434-5.79745-75.849973-6.039011-149.284342 9.420857-225.617436 6.763692a12951.020557 12951.020557 0 0 0-971.797584 5.072769l6.522131-75.366853c384.081074 24.397603 782.172652 6.522131 1146.445771 11.11178 157.328304 1.787547 313.30387 1.932483 467.902541 0.483121a23.334737 23.334737 0 0 0 17.199102-7.899026 22.803304 22.803304 0 0 0 5.507578-17.94794c-4.662116-39.929938-1.03871-76.091533 10.870219-108.46063z"
          fill="#9EBED1"
          p-id="4526"
        ></path>
        <path
          d="M2555.032914 652.410257l23.1898 43.239316-2142.882518 5.072769-20.774197-7.729933a17.199102 17.199102 0 0 1-10.628658-16.66767l6.522131-368.379646c0.652213-34.615609-15.218307-52.007959-47.587403-52.177051l-133.582915-0.724682c-12.247113 1.618455-23.600453 0-34.06002-4.831208-61.839468 10.797751-126.40857 8.309679-193.731459-7.488373l-0.483121-39.374349a12951.020557 12951.020557 0 0 1 971.797584-5.072769c76.333094 2.657165 149.767463-12.802702 225.617436-6.763692 143.003771 11.111779 261.609939-6.280571 429.494434 5.79745a18.600153 18.600153 0 0 1 16.184548 12.319582c84.860177 225.303407 238.589231 363.47597 461.138849 414.517687 126.336102 28.74569 299.776486 10.870219 449.785509 28.262569zM694.196346 274.972095a39.615909 39.615909 0 0 0-39.422661-39.833314l-147.351859-0.772993a39.615909 39.615909 0 0 0-39.809158 39.422661l-0.772993 145.902496a39.615909 39.615909 0 0 0 39.422661 39.809158l147.351859 0.772993a39.615909 39.615909 0 0 0 39.809157-39.398505l0.772994-145.902496z m296.032299 7.778246a52.660172 52.660172 0 0 0-53.022513-52.297832l-129.959508 0.893774a52.660172 52.660172 0 0 0-52.273676 53.046669l0.869618 127.543904a52.660172 52.660172 0 0 0 53.046669 52.273675l129.959508-0.893773a52.660172 52.660172 0 0 0 52.273676-53.046669l-0.893774-127.543904z m294.07566 6.570443a59.182304 59.182304 0 0 0-59.810361-58.554246l-119.81397 1.256114a59.182304 59.182304 0 0 0-58.530091 59.786205l1.183646 114.01652a59.182304 59.182304 0 0 0 59.786205 58.554247l119.81397-1.256115a59.182304 59.182304 0 0 0 58.554247-59.786205l-1.183646-114.01652z m289.80004-2.463916A54.834216 54.834216 0 0 0 1518.931944 232.384993l-123.678937 0.845461a54.834216 54.834216 0 0 0-54.447719 55.220713l0.845461 121.263333a54.834216 54.834216 0 0 0 55.196557 54.447719l123.678937-0.869617a54.834216 54.834216 0 0 0 54.44772-55.196557l-0.845462-121.263333zM984.648599 579.990442a22.70668 22.70668 0 0 0-22.754992-22.682523l-472.975309 0.845461a22.70668 22.70668 0 0 0-22.658368 22.730836v1.449362a22.70668 22.70668 0 0 0 22.754992 22.682524l472.975309-0.845461a22.70668 22.70668 0 0 0 22.658368-22.730836v-1.449363z m585.784028-0.289872a22.94824 22.94824 0 0 0-22.948241-22.94824h-473.45843a22.94824 22.94824 0 0 0-22.94824 22.94824v2.415604c0 12.681922 10.266318 22.94824 22.94824 22.94824h473.45843a22.94824 22.94824 0 0 0 22.948241-22.94824v-2.415604z"
          fill="#C8D9E5"
          p-id="4527"
        ></path>
        <path
          d="M1.497675 242.723779c67.32289 15.798052 131.891991 18.286124 193.731459 7.488373-23.672922 78.603762-28.26257 156.700247-13.768944 234.313611 1.256114 7.391749 0 15.266619-3.623406 22.465119-13.213355 26.088526-14.904278 51.138342-5.072769 75.125292 3.067817 7.415905 4.662116 15.07337 4.831209 22.94824l10.145537 288.906267c-53.312386-7.246813-101.938499 3.140286-145.902496 31.161295l-34.30158-54.351096-6.03901-628.057101zM435.340196 700.722342c-26.402554 5.000301-33.504431 16.667669-21.257318 35.026262 3.985747 5.966542 11.160092 9.952289 19.566395 10.870219l68.120039 8.454614c-83.748999-12.561142-113.605867 21.981999-89.618917 103.629422l-14.010505 72.468127c-9.831509-40.243967-24.566695-40.654619-44.205557-1.207802-33.987552-37.345242-74.956199-49.036766-122.954256-35.026261l-1.690923-639.893563 133.582915 0.724682c32.369097 0.169092 48.239617 17.561443 47.587403 52.177051l-6.522131 368.379646a17.199102 17.199102 0 0 0 10.628658 16.66767l20.774197 7.729933z"
          fill="#9EBED1"
          p-id="4528"
        ></path>
        <path
          d="M195.229134 250.212152c10.459566 4.831208 21.812906 6.449663 34.06002 4.831208l1.690923 639.893563c-14.807654 10.000602-29.228811 9.662417-43.239316-0.966242l-10.145537-288.906267a62.998959 62.998959 0 0 0-4.831209-22.94824c-9.831509-23.98695-8.140586-49.036766 5.072769-75.125292a36.717184 36.717184 0 0 0 3.623406-22.465119c-14.493625-77.613364-9.903977-155.709849 13.768944-234.313611zM2578.222714 695.649573c20.460168 19.663018 28.576598 40.09903 24.397603 61.356348l-2100.851005-1.932484-68.120039-8.454614c-8.406303-0.91793-15.580647-4.903677-19.566395-10.870219-12.247113-18.358592-5.145237-30.025961 21.257318-35.026262l2142.882518-5.072769z"
          fill="#476076"
          p-id="4529"
        ></path>
        <path
          d="M501.769312 755.073437l2100.851005 1.932484c19.807955 76.333094-6.111479 114.25808-77.782456 113.774959-90.343598-0.628057-163.125754 5.410953-218.370623 18.117032-31.885976-37.828362-48.481177-26.330086-49.761448 34.543141-3.381846-54.592656-18.600153-50.969249-58.699182-50.003008a10098.433514 10098.433514 0 0 1-536.505702-1.690923c-28.673222-2.898725-47.031814-0.386497-55.075776 7.488373a3325.924694 3325.924694 0 0 0-562.111106 3.623407c-33.335338-29.470372-50.1721-15.121683-50.486129 42.997755 0-36.064971-13.527384-53.940443-40.582151-53.626414-65.390407 0.821305-245.739419-3.695874-541.095349-13.527384-23.98695-81.647423 5.869918-116.190564 89.618917-103.629422z"
          fill="#C8D9E5"
          p-id="4530"
        ></path>
        <path
          d="M412.150395 858.702859c295.35593 9.831509 475.704942 14.348689 541.095349 13.527384 27.054767-0.314029 40.582151 17.561443 40.582151 53.626414-199.045789 16.281173-397.608457 18.044564-595.688005 5.314329l14.010505-72.468127z"
          fill="#FFFFFF"
          p-id="4531"
        ></path>
        <path
          d="M7.536685 870.78088l34.30158 54.351096c21.498878 39.85747 263.783983 12.561142 312.096068 4.831208 19.638862-39.446817 34.374048-39.036164 44.205557 1.207802 198.079547 12.730234 396.642216 10.966843 595.688005-5.314329 0.314029-58.119438 17.15079-72.468127 50.486129-42.997755-8.382147 35.122886-0.169092 53.070825 24.639163 53.867974 57.177352 1.932483 225.931464 1.787547 506.310648-0.483121 28.190101-0.144936 38.5772-19.155742 31.161295-57.00826 8.043962-7.87487 26.402554-10.387098 55.075776-7.488373-8.527083 41.234364-2.174044 62.660774 19.083274 64.255073 151.216825 11.5949 343.257362 7.415905 576.12161-12.561142 1.28027-60.873227 17.875471-72.371503 49.761448-34.543141-6.763692 31.571947 7.488373 47.514935 42.756195 47.828964 85.029269 0.821305 169.816978 0.821305 254.363126 0 7.971494 0 14.928434 4.444712 17.39235 11.11178 4.51718 12.561142 3.309378 24.011106-3.623406 34.30158-3.792499 5.749138-11.256716 9.179296-19.807955 9.179296l-2582.280929-7.971494a15.218307 15.218307 0 0 1-15.218307-16.426109l7.488373-96.141049z"
          fill="#476076"
          p-id="4532"
        ></path>
        <path
          d="M1606.42513 879.235495c7.415905 37.852518-2.971193 56.863324-31.161295 57.00826-280.379184 2.270668-449.133296 2.415604-506.310648 0.483121-24.808256-0.797149-33.02131-18.745089-24.639163-53.867974 187.281797-17.054166 374.660217-18.261968 562.111106-3.623407zM2256.70579 923.441053c-232.864248 19.977047-424.904785 24.156042-576.12161 12.561142-21.257317-1.594299-27.610356-23.020708-19.083274-64.255073 178.585621 5.314329 357.436959 5.894074 536.505702 1.690923 40.09903-0.966242 55.317337-4.589648 58.699182 50.003008z"
          fill="#FFFFFF"
          p-id="4533"
        ></path>
        <path
          d="M187.740761 893.970681c14.010505 10.628659 28.431662 10.966843 43.239316 0.966242 47.998056-14.010505 88.966704-2.31898 122.954256 35.026261-48.312085 7.729934-290.59719 35.026261-312.096068-4.831208 43.963997-28.021009 92.59011-38.408107 145.902496-31.161295z"
          fill="#E2F0FA"
          p-id="4534"
        ></path>
        <path
          d="M467.817122 234.160636m39.615367 0.207427l147.349838 0.771529q39.615366 0.207427 39.407939 39.822794l-0.76394 145.900496q-0.207427 39.615366-39.822794 39.407939l-147.349839-0.771529q-39.615366-0.207427-39.407939-39.822794l0.763941-145.900496q0.207427-39.615366 39.822794-39.407939Z"
          fill="#9EBED1"
          p-id="4535"
        ></path>
        <path
          d="M754.597781 231.71143m52.658889-0.367634l129.956341-0.907281q52.658889-0.367634 53.026523 52.291254l0.890418 127.540796q0.367634 52.658889-52.291255 53.026523l-129.956341 0.907282q-52.658889 0.367634-53.026524-52.291255l-0.890417-127.540796q-0.367634-52.658889 52.291255-53.026523Z"
          fill="#9EBED1"
          p-id="4536"
        ></path>
        <path
          d="M1045.519435 232.623887m59.179059-0.619744l119.807401-1.254666q59.179059-0.619744 59.798803 58.559314l1.193956 114.010268q0.619744 59.179059-58.559314 59.798804l-119.807401 1.254666q-59.179059 0.619744-59.798803-58.559315l-1.193956-114.010268q-0.619744-59.179059 58.559314-59.798803Z"
          fill="#9EBED1"
          p-id="4537"
        ></path>
        <path
          d="M1340.38853 233.637145m54.83288-0.382812l123.675923-0.863435q54.83288-0.382812 55.215692 54.450068l0.846571 121.260377q0.382812 54.83288-54.450068 55.215692l-123.675923 0.863435q-54.83288 0.382812-55.215692-54.450068l-0.846571-121.260378q-0.382812-54.83288 54.450068-55.215691Z"
          fill="#9EBED1"
          p-id="4538"
        ></path>
        <path
          d="M466.219429 558.170986m22.706645-0.03963l472.97459-0.825498q22.706645-0.039631 22.746276 22.667015l0.002529 1.44936q0.039631 22.706645-22.667014 22.746276l-472.97459 0.825497q-22.706645 0.039631-22.746276-22.667014l-0.002529-1.449361q-0.039631-22.706645 22.667014-22.746275Z"
          fill="#3A4C5D"
          p-id="4539"
        ></path>
        <path
          d="M1051.077716 556.75233m22.94824 0l473.45843 0q22.94824 0 22.948241 22.94824l0 2.415604q0 22.94824-22.948241 22.94824l-473.45843 0q-22.94824 0-22.94824-22.94824l0-2.415604q0-22.94824 22.94824-22.94824Z"
          fill="#476076"
          p-id="4540"
        ></path>
      </g>
    );
  },

  // 这里应该可以通过gltf-loader加载相应的贴图, 应用材质
  render3D: function (element, layer, scene) {
    let width = { length: 1.6, unit: "ft" };
    let depth = { length: 0.59, unit: "ft" };
    let height = { length: 1.05, unit: "ft" };

    // 加载后对模型进行位置,缩放调整
    let onLoadItem = (object) => {
      // 转换kuangaoshen
      let newWidth = convert(width.length).from(width.unit).to(scene.unit);
      let newHeight = convert(height.length).from(height.unit).to(scene.unit);
      let newDepth = convert(depth.length).from(depth.unit).to(scene.unit);

      let newAltitude = element.properties.get("altitude").get("length");

      // 选中后增加立方体线框盒子
      if (element.selected) {
        let box = new Three.BoxHelper(object, 0x99c3fb);
        box.material.linewidth = 2;
        box.material.depthTest = false;
        box.renderOrder = 1000;
        object.add(box);
      }

      // 增加缩放
      object.scale.set(150, 150, 150);
      // object.scale.set(
      //   newWidth / width.length,
      //   newHeight / height.length,
      //   newDepth / depth.length
      // );

      // Normalize the origin of the object
      let boundingBox = new Three.Box3().setFromObject(object);

      let center = [
        (boundingBox.max.x - boundingBox.min.x) / 2 + boundingBox.min.x,
        (boundingBox.max.y - boundingBox.min.y) / 2 + boundingBox.min.y,
        (boundingBox.max.z - boundingBox.min.z) / 2 + boundingBox.min.z,
      ];

      object.position.x -= center[0];
      object.position.y -=
        center[1] - (boundingBox.max.y - boundingBox.min.y) / 2;
      object.position.z -= center[2];

      object.position.y += newAltitude;

      object.rotation.y = Math.PI;

      return object;
    };

    if (cached3DTest) {
      return Promise.resolve(onLoadItem(cached3DTest.clone()));
    }

    // 模型描述文件
    let gltf = require("./scene.gltf");
    let bin = require("./test.bin");
    require("./textures/Material.009_baseColor.png");
    require("./textures/Material.039_baseColor.png");
    require("./textures/Material.047_baseColor.png");
    require("./textures/Material.064_baseColor.png");

    // obj + mtl方式加载模型和贴图
    // TODO: 这里需要加载texture贴图, 通过gltf-loader加载模型, 以及bin文件
    return loadGltfWithTextures(gltf).then((gltf) => {
      cached3DTest = gltf.scene;
      return onLoadItem(cached3DTest.clone());
    });
  },
};
